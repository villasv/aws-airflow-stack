AWSTemplateFormatVersion: 2010-09-09
Parameters:
  ParentStack:
    Type: String
  VPCID:
    Type: AWS::EC2::VPC::Id
  LogIngressCIDR:
    Type: String
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
  IamInstanceProfile:
    Type: String
  IamRole:
    Type: String
  ImageId:
    Type: AWS::EC2::Image::Id
  InstanceType:
    Type: String
  MinSize:
    Type: Number
  MaxSize:
    Type: Number
  PrivateSubnet1AID:
    Type: String
  PrivateSubnet2AID:
    Type: String
  ShrinkThreshold:
    Type: Number
  GrowthThreshold:
    Type: Number

Resources:

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile: !Ref IamInstanceProfile
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref SecurityGroup
      UserData: !Base64
        'Fn::Sub': |
          #!/bin/bash -xe
          echo 'TURBINE_MACHINE=WORKER' > /etc/environment
          /opt/aws/bin/cfn-init -v \
            --region ${AWS::Region} \
            --role ${IamRole} \
            --stack ${ParentStack} \
            --resource Meta

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: >-
        Security Rules with permissions for node intercommunication between
        Airflow worker instances.
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - CidrIp: !Ref LogIngressCIDR
          IpProtocol: TCP
          FromPort: 8793
          ToPort: 8793
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-sg

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref LaunchConfiguration
      MaxSize: !Ref MaxSize
      MinSize: !Ref MinSize
      MetricsCollection:
        - Granularity: 1Minute
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1AID
        - !Ref PrivateSubnet2AID
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-worker
          PropagateAtLaunch: true

  LifecycleHook:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      DefaultResult: CONTINUE
      HeartbeatTimeout: 300
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING

  # ShrinkAlarm and GrowthAlarm are triggered by the treshold [...] from Metric Workerload
  ShrinkAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref ShrinkScalingPolicy
      Namespace: Turbine
      MetricName: WorkerLoad
      Dimensions:
        - Name: StackName
          Value: !Ref AWS::StackName
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: !Ref ShrinkThreshold
      ComparisonOperator: LessThanOrEqualToThreshold

  GrowthAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref GrowthScalingPolicy
      Namespace: Turbine
      MetricName: WorkerLoad
      Dimensions:
        - Name: StackName
          Value: !Ref AWS::StackName
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: !Ref GrowthThreshold
      ComparisonOperator: GreaterThanOrEqualToThreshold

  ShrinkScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      PolicyType: SimpleScaling
      ScalingAdjustment: -1
      Cooldown: '600'
      AutoScalingGroupName: !Ref AutoScalingGroup

  GrowthScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      PolicyType: SimpleScaling
      ScalingAdjustment: 1
      Cooldown: '600'
      AutoScalingGroupName: !Ref AutoScalingGroup

Outputs:
  AutoScalingGroup:
    Description: The workers auto scaling group
    Value: !Ref AutoScalingGroup
