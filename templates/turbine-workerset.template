AWSTemplateFormatVersion: 2010-09-09
Parameters:
  VPCID:
    Type: AWS::EC2::VPC::Id
  PrivateSubnet1AID:
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2AID:
    Type: AWS::EC2::Subnet::Id
  InstancesSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
  IamInstanceProfile:
    Type: String
  IamRole:
    Type: String
  ImageId:
    Type: AWS::EC2::Image::Id
  InstanceType:
    Type: String
  MinSize:
    Type: Number
  MaxSize:
    Type: Number
  ShrinkThreshold:
    Type: Number
  GrowthThreshold:
    Type: Number
  QueueName:
    Type: String
  SharedCloudInitStack:
    Type: String

Resources:

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile: !Ref IamInstanceProfile
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref InstancesSecurityGroup
        - !Ref WorkersetSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo 'TURBINE_MACHINE=WORKER' > /etc/environment
          /opt/aws/bin/cfn-init -v \
            --region ${AWS::Region} \
            --role ${IamRole} \
            --stack ${SharedCloudInitStack} \
            --resource SharedCloudInitMetadata

  WorkersetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: >-
        The security group used by the Airflow worker instances. It exposes the
        a special port where the Airflow webserver can fetch logs directly.
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref InstancesSecurityGroup
          IpProtocol: TCP
          FromPort: 8793
          ToPort: 8793
      Tags:
        - Key: Name
          Value: turbine-workerset-sg

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref LaunchConfiguration
      MaxSize: !Ref MaxSize
      MinSize: !Ref MinSize
      MetricsCollection:
        - Granularity: 1Minute
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1AID
        - !Ref PrivateSubnet2AID
      Tags:
        - Key: Name
          Value: turbine-worker
          PropagateAtLaunch: true

  CloudWatchMetricLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs8.10
      Handler: index.handler
      Code:
        ZipFile: !Sub
          - |
            var AWS = require('aws-sdk');
            AWS.config.update({region: '${AWS::Region}'});
            var cw = new AWS.CloudWatch({apiVersion: '2010-08-01'});
            const datePlusMinutes = (d, m) => {
              const _d = new Date(d);
              _d.setMinutes(d.getMinutes() + m);
              return _d;
            };
            const getMetricAtTime = (ms, m, t) => {
              const m_idx = ms.MetricDataResults
                .map(_r => _r.Id)
                .indexOf(m);
              const t_idx = ms.MetricDataResults[m_idx]
                .Timestamps
                .map(_t => _t.toISOString())
                .indexOf(t.toISOString());
              return ms.MetricDataResults[m_idx]
                .Values[t_idx];
            };
            const discount = (ms, m, t1, t2, ws) => {
              let incs = 0, d = t1;
              let v1 = getMetricAtTime(ms, m, d), v2;
              for (let i = 0; d < t2 ; i++) {
                d = datePlusMinutes(t1, i+1);
                v2 = getMetricAtTime(ms, m, d);
                if (v2 > v1) incs += ws[i];
                v1 = v2;
              }
              return incs;
            };
            exports.handler = async function(event, context) {
              let curr = new Date();
              curr.setMinutes(Math.floor(curr.getMinutes()/5)*5-5);
              curr.setSeconds(0); curr.setMilliseconds(0);
              const prev = datePlusMinutes(curr, -5);
              const back = datePlusMinutes(prev, -5);
              const metrics = await cw.getMetricData({
                StartTime: back, EndTime: curr,
                ScanBy: 'TimestampDescending',
                MetricDataQueries: [
                  { Id: 'maxANOMV', MetricStat: {
                      Metric: { Namespace: 'AWS/SQS',
                                MetricName: 'ApproximateNumberOfMessagesVisible',
                                Dimensions: [{ Name: 'QueueName',
                                              Value: '${queueName}' }]},
                      Period: 300,
                      Stat: 'Maximum',
                      Unit: 'Count' }},
                  { Id: 'sumNOER', MetricStat: {
                      Metric: { Namespace: 'AWS/SQS',
                                MetricName: 'NumberOfEmptyReceives',
                                Dimensions: [{ Name: 'QueueName',
                                              Value: '${queueName}' }]},
                      Period: 300,
                      Stat: 'Sum',
                      Unit: 'Count', }},
                  { Id: 'avgGISI', MetricStat: {
                      Metric: { Namespace: 'AWS/AutoScaling',
                                MetricName: 'GroupInServiceInstances',
                                Dimensions: [{ Name: 'AutoScalingGroupName',
                                              Value: '${asgName}' }]},
                      Period: 300,
                      Stat: 'Average',
                      Unit: 'None', }},
                  { Id: 'uGISI', MetricStat: {
                      Metric: { Namespace: 'AWS/AutoScaling',
                                MetricName: 'GroupDesiredCapacity',
                                Dimensions: [{ Name: 'AutoScalingGroupName',
                                              Value: '${asgName}' }]},
                      Period: 60,
                      Stat: 'Average',
                      Unit: 'None', }},
              ]}).promise();
              const ANOMV = getMetricAtTime(metrics, 'maxANOMV', prev);
              const NOER = getMetricAtTime(metrics, 'sumNOER', prev);
              const GISI = getMetricAtTime(metrics, 'avgGISI', prev);
              const ws = [0, 0, 0, 0.1, 0.3, 0.3, 0.3, 0.3, 0.2];
              const dGISI = discount(metrics, 'uGISI', back, curr, ws);
              const M = GISI - dGISI;
              let l;
              if (M > 0)
                l = 1 - NOER / (M * 0.098444 * 300);
              else
                l = (ANOMV > 0) ? 1.0 : 0.0;
              await cw.putMetricData({
                Namespace: 'Turbine',
                MetricData: [{ MetricName: 'WorkerLoad',
                              Dimensions: [ { Name: 'StackName',
                                              Value: '${AWS::StackName}' }],
                              Timestamp: prev,
                              Value: (l > 0) ? l : 0,
                              Unit: 'None' }],
              }).promise();
            };
          - asgName: !Ref AutoScalingGroup
            queueName: !Ref QueueName
      Role: !GetAtt
        - CloudWatchMetricLambdaRole
        - Arn

  CloudWatchMetricLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: cloudwatch-rw-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: '*'
                Action:
                  - cloudwatch:GetMetric*
                  - cloudwatch:PutMetricData

  CloudWatchMetricLambdaTimer:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(1 minute)
      State: ENABLED
      Targets:
        - Arn: !GetAtt
            - CloudWatchMetricLambda
            - Arn
          Id: TargetFunction

  CloudWatchMetricLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CloudWatchMetricLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt
        - CloudWatchMetricLambdaTimer
        - Arn

  LoadAboveThresholdAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref LoadAboveThresholdPolicy
      Namespace: Turbine
      MetricName: WorkerLoad
      Dimensions:
        - Name: StackName
          Value: !Ref AWS::StackName
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: !Ref GrowthThreshold
      ComparisonOperator: GreaterThanOrEqualToThreshold

  LoadAboveThresholdPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      PolicyType: SimpleScaling
      ScalingAdjustment: 1
      Cooldown: '600'
      AutoScalingGroupName: !Ref AutoScalingGroup

  LoadBelowThresholdAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref LoadBelowThresholdPolicy
      Namespace: Turbine
      MetricName: WorkerLoad
      Dimensions:
        - Name: StackName
          Value: !Ref AWS::StackName
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: !Ref ShrinkThreshold
      ComparisonOperator: LessThanOrEqualToThreshold

  LoadBelowThresholdPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      PolicyType: SimpleScaling
      ScalingAdjustment: -1
      Cooldown: '600'
      AutoScalingGroupName: !Ref AutoScalingGroup

  GracefulShutdownLifecycleHook:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      DefaultResult: CONTINUE
      HeartbeatTimeout: 300
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING

Outputs:
  AutoScalingGroup:
    Description: The workers autoscaling group
    Value: !Ref AutoScalingGroup
